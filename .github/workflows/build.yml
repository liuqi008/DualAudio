name: Build DualAudio (.NET 4.8 + NAudio + path fix)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            7.0.x
            6.0.x

      # 找到第一个 .sln/.csproj 并写入环境变量 PROJ
      - name: Locate project file
        shell: pwsh
        run: |
          $proj = (Get-ChildItem -Recurse -Include *.sln,*.csproj | Select-Object -First 1)
          if ($null -eq $proj) { Write-Error "No .sln/.csproj found."; exit 1 }
          "PROJ=$($proj.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Found project: $($proj.FullName)"

      # 将所有 csproj 目标框架改为 .NET Framework 4.8，并开启绑定重定向
      - name: Retarget to .NET Framework 4.8
        shell: pwsh
        run: |
          $csprojs = Get-ChildItem -Recurse -Filter *.csproj
          foreach ($p in $csprojs) {
            $xml = [xml](Get-Content $p.FullName -Raw)
            $pg = $xml.Project.PropertyGroup | Select-Object -First 1
            if (-not $pg) { $pg = $xml.CreateElement('PropertyGroup'); $xml.Project.AppendChild($pg) | Out-Null }
            if ($pg.TargetFrameworkVersion) { $pg.TargetFrameworkVersion = 'v4.8' }
            else { $n = $xml.CreateElement('TargetFrameworkVersion'); $n.InnerText = 'v4.8'; $pg.AppendChild($n) | Out-Null }
            if (-not $pg.AutoGenerateBindingRedirects) { $n=$xml.CreateElement('AutoGenerateBindingRedirects'); $n.InnerText='true'; $pg.AppendChild($n) | Out-Null }
            if (-not $pg.GenerateBindingRedirectsOutputType) { $n=$xml.CreateElement('GenerateBindingRedirectsOutputType'); $n.InnerText='true'; $pg.AppendChild($n) | Out-Null }
            $xml.Save($p.FullName)
            Write-Host "Retargeted: $($p.FullName)"
          }

      # 给 csproj 注入 NAudio 包引用（如已存在则跳过）
      - name: Inject NAudio PackageReference
        shell: pwsh
        run: |
          $version = '2.2.1'   # 若不兼容可改为 '1.10.0'
          $csprojs = Get-ChildItem -Recurse -Filter *.csproj
          foreach ($p in $csprojs) {
            $xml = [xml](Get-Content $p.FullName -Raw)
            $pkgGroup = $xml.Project.ItemGroup | Where-Object { $_.PackageReference } | Select-Object -First 1
            if (-not $pkgGroup) { $pkgGroup = $xml.CreateElement('ItemGroup'); $xml.Project.AppendChild($pkgGroup) | Out-Null }
            $hasNAudio = $pkgGroup.PackageReference | Where-Object { $_.Include -eq 'NAudio' }
            if (-not $hasNAudio) {
              $pr = $xml.CreateElement('PackageReference')
              $pr.SetAttribute('Include','NAudio')
              $ver = $xml.CreateElement('Version'); $ver.InnerText = $version
              $pr.AppendChild($ver) | Out-Null
              $pkgGroup.AppendChild($pr) | Out-Null
              Write-Host "Added PackageReference NAudio $version to $($p.FullName)"
            }
            $xml.Save($p.FullName)
          }

      - name: Restore (use detected project)
        run: dotnet restore "$env:PROJ"

      - name: Build x64 (use detected project)
        run: dotnet build "$env:PROJ" -c Release /p:PlatformTarget=x64

      - name: Collect artifacts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          Get-ChildItem -Recurse -Include *.exe,*.dll,*.pdb |
            Where-Object { $_.FullName -match '\\bin\\Release\\' } |
            Copy-Item -Destination artifacts -Force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: DualAudio-build
          path: artifacts
