name: Build DualAudio (SDK shim with NAudio)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            7.0.x
            6.0.x

      # 1) 在仓库根目录生成一个临时的 SDK 风格工程（不改你的原始项目）
      - name: Create SDK-style csproj
        shell: pwsh
        run: |
          $cs = @"
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net48</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>disable</Nullable>
    <LangVersion>latest</LangVersion>
  </PropertyGroup>
  <ItemGroup>
    <!-- 把仓库下所有 C# 源码都编进来；如需排除测试等，可在这里加 Exclude -->
    <Compile Include="**\*.cs" Exclude="obj\**;bin\**;.github\**" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="NAudio" Version="2.2.1" />
  </ItemGroup>
</Project>
"@
          Set-Content -Path DualAudio.SDK.csproj -Value $cs -Encoding UTF8
          Write-Host "Created DualAudio.SDK.csproj"

      # 2) 还原并编译这个临时工程
      - name: Restore
        run: dotnet restore "DualAudio.SDK.csproj"

      - name: Build x64
        run: dotnet build "DualAudio.SDK.csproj" -c Release /p:PlatformTarget=x64

      # 如需要同时产出 x86，可取消以下注释
      # - name: Build x86
      #   run: dotnet build "DualAudio.SDK.csproj" -c Release /p:PlatformTarget=x86

      # 3) 打包产物
      - name: Collect artifacts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          Get-ChildItem -Recurse -Include *.exe,*.dll,*.pdb |
            Where-Object { $_.FullName -match '\\bin\\Release\\' } |
            Copy-Item -Destination artifacts -Force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: DualAudio-build
          path: artifacts
