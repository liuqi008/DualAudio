name: Build DualAudio (.NET 4.8 + NAudio, no-xpath)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            7.0.x
            6.0.x

      # 定位项目文件，写入 PROJ 环境变量
      - name: Locate project file
        shell: pwsh
        run: |
          $proj = (Get-ChildItem -Recurse -Include *.sln,*.csproj | Select-Object -First 1)
          if ($null -eq $proj) { Write-Error "No .sln/.csproj found."; exit 1 }
          "PROJ=$($proj.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Found project: $($proj.FullName)"

      # 仅把 v2.0 -> v4.8；不使用 XPath，避免命名空间问题
      - name: Retarget to .NET Framework 4.8 (no-xpath)
        shell: pwsh
        run: |
          $csprojs = Get-ChildItem -Recurse -Filter *.csproj
          foreach ($p in $csprojs) {
            $xml = [xml](Get-Content $p.FullName -Raw)
            $ns  = $xml.Project.NamespaceURI

            # 确保有一个 PropertyGroup
            $pg = $xml.Project.PropertyGroup | Select-Object -First 1
            if (-not $pg) {
              $pg = $xml.CreateElement('PropertyGroup', $ns)
              [void]$xml.Project.AppendChild($pg)
            }

            # 查找/创建 TargetFrameworkVersion（按 LocalName 避免 XPath）
            $tfv = $null
            foreach ($node in $pg.ChildNodes) {
              if ($node.LocalName -eq 'TargetFrameworkVersion') { $tfv = $node; break }
            }
            if ($tfv) {
              if ($tfv.InnerText -ne 'v4.8') { $tfv.InnerText = 'v4.8' }
            } else {
              $n = $xml.CreateElement('TargetFrameworkVersion', $ns)
              $n.InnerText = 'v4.8'
              [void]$pg.AppendChild($n)
            }

            $xml.Save($p.FullName)
            Write-Host "Retargeted: $($p.FullName)"
          }

      # 注入 NAudio 的 PackageReference；同样只用 LocalName 处理节点
      - name: Inject NAudio PackageReference (no-xpath)
        shell: pwsh
        run: |
          $version = '2.2.1'   # 如不兼容可改 '1.10.0'
          $csprojs = Get-ChildItem -Recurse -Filter *.csproj
          foreach ($p in $csprojs) {
            $xml = [xml](Get-Content $p.FullName -Raw)
            $ns  = $xml.Project.NamespaceURI

            # 找到包含 PackageReference 的 ItemGroup
            $pkgGroup = $null
            foreach ($ig in $xml.Project.ItemGroup) {
              foreach ($child in $ig.ChildNodes) {
                if ($child.LocalName -eq 'PackageReference') { $pkgGroup = $ig; break }
              }
              if ($pkgGroup) { break }
            }
            if (-not $pkgGroup) {
              $pkgGroup = $xml.CreateElement('ItemGroup', $ns)
              [void]$xml.Project.AppendChild($pkgGroup)
            }

            # 是否已有 NAudio
            $hasNAudio = $false
            foreach ($child in $pkgGroup.ChildNodes) {
              if ($child.LocalName -eq 'PackageReference' -and $child.GetAttribute('Include') -eq 'NAudio') {
                $hasNAudio = $true; break
              }
            }

            if (-not $hasNAudio) {
              $pr  = $xml.CreateElement('PackageReference', $ns)
              [void]$pr.SetAttribute('Include','NAudio')
              $ver = $xml.CreateElement('Version', $ns)
              $ver.InnerText = $version
              [void]$pr.AppendChild($ver)
              [void]$pkgGroup.AppendChild($pr)
              Write-Host "Added NAudio $version to $($p.FullName)"
            }

            $xml.Save($p.FullName)
          }

      - name: Restore (use detected project)
        run: dotnet restore "$env:PROJ"

      - name: Build x64 (use detected project)
        run: dotnet build "$env:PROJ" -c Release /p:PlatformTarget=x64

      - name: Collect artifacts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          Get-ChildItem -Recurse -Include *.exe,*.dll,*.pdb |
            Where-Object { $_.FullName -match '\\bin\\Release\\' } |
            Copy-Item -Destination artifacts -Force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: DualAudio-build
          path: artifacts
